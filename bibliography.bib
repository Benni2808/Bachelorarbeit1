
@inproceedings{shrivastava2016,
  title = {{{XTrap}}: {{Trapping}} Client and Server Side {{XSS}} Vulnerability},
  booktitle = {2016 {{Fourth International Conference}} on {{Parallel}}, {{Distributed}} and {{Grid Computing}} ({{PDGC}})},
  publisher = {{IEEE}},
  doi = {10.1109/PDGC.2016.7913227},
  author = {Shrivastava, Ankit and Kumar Verma, Vivek and Gauri Shankar, Venkatesh},
  year = {2016},
  keywords = {DOM,Internet,phishing attack,security of data,substance attack,Vulnerability,Web Application,XSS,XSS attack,XSS vulnerability,XTrap},
  pages = {394-398},
  file = {/Users/benjaminjoham/Zotero/storage/3GM58DIC/XTrap- Trapping client and server side XSS vulnerability.pdf}
}

@article{hydara2015,
  title = {Cross-{{Site Scripting Detection Based}} on an {{Enhanced Genetic Algorithm}}},
  volume = {8},
  number = {November},
  journal = {Indian Journal of Science and Technology},
  doi = {10.17485/ijst/2015/v8i30/8},
  author = {Hydara, Isatou and Md Sultan, Abu Bakar and Zulzalil, Hazura and Admodisastro, Novia},
  year = {2015},
  pages = {1-9},
  file = {/Users/benjaminjoham/Zotero/storage/UZPQR8B8/Cross-Site Scripting Detection Based on an Enhanced Genetic Algorithm.pdf}
}

@article{gupta2016,
  title = {{{XSS}}-{{SAFE}}: {{A Server}}-{{Side Approach}} to {{Detect}} and {{Mitigate Cross}}-{{Site Scripting}} ({{XSS}}) {{Attacks}} in {{JavaScript Code}}},
  volume = {41},
  number = {3},
  journal = {Arabian Journal for Science and Engineering},
  doi = {10.1007/s13369-015-1891-7},
  author = {Gupta, Shashank and Gupta, Brij Bhooshan},
  month = mar,
  year = {2016},
  pages = {897-920},
  file = {/Users/benjaminjoham/Zotero/storage/335E4GBP/XSS-SAFE- A Server-Side Approach to Detect and Mitigate Cross-Site Scripting (XSS) Attacks in JavaScript Code.pdf}
}

@inproceedings{saxena2011,
  series = {{{CCS}} '11},
  title = {{{SCRIPTGARD}}: {{Automatic Context}}-Sensitive {{Sanitization}} for {{Large}}-Scale {{Legacy Web Applications}}},
  isbn = {978-1-4503-0948-6},
  booktitle = {Proceedings of the 18th {{ACM Conference}} on {{Computer}} and {{Communications Security}}},
  publisher = {{ACM}},
  doi = {10.1145/2046707.2046776},
  author = {Saxena, Prateek and Molnar, David and Livshits, Benjamin},
  year = {2011},
  keywords = {cross-site scripting,runtime analysis,web applications},
  pages = {601-614},
  file = {/Users/benjaminjoham/Zotero/storage/SAL2T6TN/ScriptGard- Automatic Context-Sensitive Sanitization for Large-Scale Legacy Web Applications.pdf}
}

@article{mohosinaand2012,
  title = {{{DESERVE}}: {{A}} Framework for {{DEtecting}} Program {{SEcuRity Vulnerability Exploitations}}},
  issn = {9780769547428},
  journal = {Proceedings of the 2012 IEEE 6th International Conference on Software Security and Reliability, SERE 2012},
  doi = {10.1109/SERE.2012.22},
  author = {Mohosinaand, Amatul and Zulkernine, Mohammad},
  year = {2012},
  keywords = {XSS,Buffer overflow,In-vivo testing,SQL Injection},
  pages = {98-107},
  file = {/Users/benjaminjoham/Zotero/storage/9XRCBUIW/DESERVE- A Framework for Detecting Program Security Vulnerability Exploitations.pdf}
}

@article{gupta2015,
  title = {{{PHP}}-Sensor: A Prototype Method to Discover Workflow Violation and {{XSS}} Vulnerabilities in {{PHP}} Web Applications},
  issn = {9781450333580},
  journal = {Proceedings of the 12th ACM International Conference on Computing Frontiers - CF '15},
  doi = {10.1145/2742854.2745719},
  author = {Gupta, Shashank and Gupta, Brij Bhooshan},
  year = {2015},
  pages = {59-59},
  file = {/Users/benjaminjoham/Zotero/storage/77F6IQWM/PHP-sensor- a prototype method to discover workflow violation and XSS vulnerabilities in PHP web applications.pdf}
}

@inproceedings{kurilova2014,
  series = {{{HotSoS}} '14},
  title = {Type-Specific {{Languages}} to {{Fight Injection Attacks}}},
  isbn = {978-1-4503-2907-1},
  booktitle = {Proceedings of the 2014 {{Symposium}} and {{Bootcamp}} on the {{Science}} of {{Security}}},
  publisher = {{ACM}},
  doi = {10.1145/2600176.2600194},
  author = {Kurilova, Darya and Omar, Cyrus and Nistor, Ligia and Chung, Benjamin and Potanin, Alex and Aldrich, Jonathan},
  year = {2014},
  pages = {18:1--18:2},
  file = {/Users/benjaminjoham/Zotero/storage/X5C5PLIF/Type-Specific Languages to Fight Injection Attacks.pdf}
}

@inproceedings{wang2011,
  title = {Program Slicing Stored {{XSS}} Bugs in Web Application},
  isbn = {978-0-7695-4506-6},
  booktitle = {Proceedings - 5th {{International Conference}} on {{Theoretical Aspects}} of {{Software Engineering}}, {{TASE}} 2011},
  publisher = {{IEEE}},
  doi = {10.1109/TASE.2011.43},
  author = {Wang, Yi and Li, Zhoujun and Guo, Tao},
  year = {2011},
  keywords = {Web Application,Program Slicing,Static Analysis,Stored Cross-Site Scripting},
  pages = {191-194},
  file = {/Users/benjaminjoham/Zotero/storage/4T57VT8C/Program Slicing Stored XSS Bugs in Web Application.pdf}
}

@article{gupta2016a,
  title = {{{CSSXC}}: {{Context}}-Sensitive {{Sanitization Framework}} for {{Web Applications}} against {{XSS Vulnerabilities}} in {{Cloud Environments}}},
  volume = {85},
  journal = {Procedia Computer Science},
  doi = {10.1016/J.PROCS.2016.05.211},
  author = {Gupta, Shashank and Gupta, Brij Bhooshan},
  month = jan,
  year = {2016},
  pages = {198-205},
  file = {/Users/benjaminjoham/Zotero/storage/538JKEX5/Gupta, Gupta - 2016 - CSSXC Context-sensitive Sanitization Framework for Web Applications against XSS Vulnerabilities in Cloud Environme.pdf}
}

@inproceedings{marashdih2017,
  title = {Detection and Removing Cross Site Scripting Vulnerability in {{PHP}} Web Application},
  isbn = {978-1-5386-2269-8},
  booktitle = {Proceedings - 2017 {{International Conference}} on {{Promising Electronic Technologies}}, {{ICPET}} 2017},
  publisher = {{IEEE}},
  doi = {10.1109/ICPET.2017.11},
  author = {Marashdih, Abdalla Wasef and Zaaba, Zarul Fitri},
  year = {2017},
  keywords = {XSS,Cross Site Scripting,Security Vulnerability,Software Security,Vulnerability Removal,Web Application Security},
  pages = {26-31},
  file = {/Users/benjaminjoham/Zotero/storage/F3I28EUV/Detection and Removing Cross Site Scripting Vulnerability in PHP Web Application.pdf}
}

@article{gupta2017,
  title = {Cross-{{Site Scripting}} ({{XSS}}) Attacks and Defense Mechanisms: Classification and State-of-the-Art},
  volume = {8},
  number = {1},
  journal = {International Journal of System Assurance Engineering and Management},
  doi = {10.1007/s13198-015-0376-0},
  author = {Gupta, Shashank and Gupta, Brij Bhooshan},
  month = jan,
  year = {2017},
  pages = {512-530},
  file = {/Users/benjaminjoham/Zotero/storage/LGYHAFIR/Cross-Site Scripting (XSS) attacks and defense mechanisms- classification and state-of-the-art.pdf}
}

@article{hydara2015a,
  title = {Current State of Research on Cross-Site Scripting ({{XSS}}) \textendash{} {{A}} Systematic Literature Review},
  volume = {58},
  journal = {Information and Software Technology},
  doi = {10.1016/J.INFSOF.2014.07.010},
  author = {Hydara, Isatou and Sultan, Abu Bakar Md. and Zulzalil, Hazura and Admodisastro, Novia},
  month = feb,
  year = {2015},
  pages = {170-186},
  file = {/Users/benjaminjoham/Zotero/storage/SK89YC2P/Current state of research on cross-site scripting.pdf}
}

@article{sarmah2018,
  title = {A Survey of Detection Methods for {{XSS}} Attacks},
  volume = {118},
  journal = {Journal of Network and Computer Applications},
  doi = {10.1016/j.jnca.2018.06.004},
  author = {Sarmah, Upasana and Bhattacharyya, D.K. and Kalita, J.K.},
  month = jul,
  year = {2018},
  pages = {113-143},
  file = {/Users/benjaminjoham/Zotero/storage/BNHJVAXM/A Survey of Detection Methods for XSS Attacks.pdf}
}

@article{gupta2016b,
  title = {{{JS}}-{{SAN}}: Defense Mechanism for {{HTML5}}-Based Web Applications against {{JavaScript}} Code Injection Vulnerabilities},
  volume = {9},
  number = {11},
  journal = {Security and Communication Networks},
  doi = {10.1002/sec.1433},
  author = {Gupta, Shashank and Gupta, Brij Bhooshan},
  year = {2016},
  keywords = {clustering,cross-site scripting (XSS) attack,HTML5,javascript (JS) code injection vulnerabilities,sanitization},
  pages = {1477-1495},
  file = {/Users/benjaminjoham/Zotero/storage/3V7LTU99/JS-SAN- defense mechanism for HTML5-based web applications against javascript code injection vulnerabilities.pdf}
}

@article{marashdih2017a,
  title = {Cross {{Site Scripting}}: {{Removing Approaches}} in {{Web Application}}},
  volume = {124},
  journal = {Procedia Computer Science},
  doi = {10.1016/j.procs.2017.12.201},
  author = {Marashdih, Abdalla Wasef and Zaaba, Zarul Fitri},
  year = {2017},
  pages = {647-655},
  file = {/Users/benjaminjoham/Zotero/storage/TG89SLR5/Marashdih, Zaaba - 2017 - Cross Site Scripting Removing Approaches in Web Application.pdf}
}

@article{beach2018,
  title = {Examining {{Elementary Teachers}}' {{Use}} of {{Online Learning Environments}}: {{An Exploratory Study}}},
  volume = {50},
  issn = {1539-1523, 1945-0818},
  shorttitle = {Examining {{Elementary Teachers}}' {{Use}} of {{Online Learning Environments}}},
  language = {en},
  number = {1},
  journal = {Journal of Research on Technology in Education},
  doi = {10.1080/15391523.2017.1383216},
  author = {Beach, Pamela},
  month = jan,
  year = {2018},
  pages = {34-47},
  file = {/Users/benjaminjoham/Documents/FH-Salzburg/SS_2019/04_HCI-Studio/Assignment1/Beach - 2018 - Examining Elementary Teachers' Use of Online Learn.pdf}
}

@misc{zotero-74,
  title = {{{WebPageTest Test Result}} - {{Frankfurt}} : Www.Nbcnews.Com/ - 03/26/19 18:32:14},
  howpublished = {https://www.webpagetest.org/result/190326\_XN\_3e049f86aee13c2848be32a451da0ecd/},
  file = {/Users/benjaminjoham/Zotero/storage/BXH7GRSF/190326_XN_3e049f86aee13c2848be32a451da0ecd.html}
}

@misc{zotero-76,
  title = {{{WebPageTest Test Result}} - {{Frankfurt}} : Www.Bbc.Com/ - 03/26/19 18:21:26},
  howpublished = {https://www.webpagetest.org/result/190326\_36\_54039f78ca62b40f6553a7424526a88a/},
  file = {/Users/benjaminjoham/Zotero/storage/LBU2JKLN/190326_36_54039f78ca62b40f6553a7424526a88a.html}
}

@misc{zotero-78,
  title = {{{WebPageTest Content Breakdown}} - {{Frankfurt}} : Www.Welt.de/ - 03/26/19 18:22:04},
  howpublished = {https://www.webpagetest.org/result/190326\_2H\_aadd1e1cefac9fdc830e0b16ff08ad33/3/breakdown/},
  file = {/Users/benjaminjoham/Zotero/storage/FYWLDMXI/breakdown.html}
}

@article{wikipedia2019,
  title = {Cross-Site Scripting},
  copyright = {Creative Commons Attribution-ShareAlike License},
  abstract = {Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy. Cross-site scripting carried out on websites accounted for roughly 84\% of all security vulnerabilities documented by Symantec as of 2007. In 2017, XSS is still considered a major threat vector. XSS effects vary in 
range from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site's owner.},
  language = {en},
  journal = {Wikipedia},
  author = {Wikipedia},
  month = mar,
  year = {2019},
  file = {/Users/benjaminjoham/Zotero/storage/7J8PL3SK/index.html},
  note = {Page Version ID: 889687114}
}

@misc{zotero-87,
  title = {{{JavaScript}} Array to {{CSV}}},
  journal = {Stack Overflow},
  howpublished = {https://stackoverflow.com/questions/18848860/javascript-array-to-csv},
  file = {/Users/benjaminjoham/Zotero/storage/3394UPW5/javascript-array-to-csv.html}
}

@inproceedings{pranathi2018,
  address = {Coimbatore},
  title = {Attacks on {{Web Application Caused}} by {{Cross Site Scripting}}},
  isbn = {978-1-5386-0965-1},
  abstract = {Cross Site Scripting (XSS) Attacks are as of now the most well known security issues in current web applications. The attacks which we are using will make use of vulnerabilities in the web applications. Cross-Site scripting (XSS) Attacks happen while getting to data in middle of the data transfer. Web proxy is used as one solution on client-side. Cross Site Scripting (XSS) Attacks are anything but difficult to find and detect, yet hard to distinguish and counteract. This paper gives customer side answer for relieve cross site scripting Attacks. The client system performance is decreased which result in poor web surfing background. In this undertaking gives a customer side arrangement that uses a well ordered way to deal with ensure cross website scripting, without corrupting much the client's web perusing knowledge. Attackers accesses and manipulates the control system networks by using cross-site scripting. It exploits Web servers that arrival progressively produced Web pages or enable clients to post distinguishable substance.},
  language = {en},
  booktitle = {2018 {{Second International Conference}} on {{Electronics}}, {{Communication}} and {{Aerospace Technology}} ({{ICECA}})},
  publisher = {{IEEE}},
  doi = {10.1109/ICECA.2018.8474765},
  author = {Pranathi, K. and Kranthi, S. and Srisaila, A. and Madhavilatha, P.},
  month = mar,
  year = {2018},
  pages = {1754-1759},
  file = {/Users/benjaminjoham/Downloads/Pranathi2018.pdf}
}

@article{KIRDA2009592,
  title = {Client-Side Cross-Site Scripting Protection},
  volume = {28},
  issn = {0167-4048},
  abstract = {Web applications are becoming the dominant way to provide access to online services. At the same time, web application vulnerabilities are being discovered and disclosed at an alarming rate. Web applications often make use of JavaScript code that is embedded into web pages to support dynamic client-side behavior. This script code is executed in the context of the user's web browser. To protect the user's environment from malicious JavaScript code, browsers use a sand-boxing mechanism that limits a script to access only resources associated with its origin site. Unfortunately, these security mechanisms fail if a user can be lured into downloading malicious JavaScript code from an intermediate, trusted site. In this case, the malicious script is granted full access to all resources (e.g., authentication tokens and cookies) that belong to the trusted site. Such attacks are called cross-site scripting (XSS) attacks. In general, XSS attacks are easy to execute, but difficult to detect and prevent. One reason is the high flexibility of HTML encoding schemes, offering the attacker many possibilities for circumventing server-side input filters that should prevent malicious scripts from being injected into trusted sites. Also, devising a client-side solution is not easy because of the difficulty of identifying JavaScript code as being malicious. This paper presents Noxes, which is, to the best of our knowledge, the first client-side solution to mitigate cross-site scripting attacks. Noxes acts as a web proxy and uses both manual and automatically generated rules to mitigate possible cross-site scripting attempts. Noxes effectively protects against information leakage from the user's environment while requiring minimal user interaction and customization effort.},
  number = {7},
  journal = {Computers \& Security},
  doi = {https://doi.org/10.1016/j.cose.2009.04.008},
  author = {Kirda, Engin and Jovanovic, Nenad and Kruegel, Christopher and Vigna, Giovanni},
  year = {2009},
  keywords = {Client-side defense,Client-side protection,Cross-site scripting (XSS),Firewall,Intrusion detection,Proxy,Web security},
  pages = {592-604}
}

@article{kirda2009,
  title = {Client-Side Cross-Site Scripting Protection},
  volume = {28},
  issn = {01674048},
  abstract = {Web applications are becoming the dominant way to provide access to online services. At the same time, web application vulnerabilities are being discovered and disclosed at an alarming rate. Web applications often make use of JavaScript code that is embedded into web pages to support dynamic client-side behavior. This script code is executed in the context of the user's web browser. To protect the user's environment from malicious JavaScript code, browsers use a sand-boxing mechanism that limits a script to access only resources associated with its origin site. Unfortunately, these security mechanisms fail if a user can be lured into downloading malicious JavaScript code from an intermediate, trusted site. In this case, the malicious script is granted full access to all resources (e.g., authentication tokens and cookies) that belong to the trusted site. Such attacks are called cross-site scripting (XSS) attacks.},
  language = {en},
  number = {7},
  journal = {Computers \& Security},
  doi = {10.1016/j.cose.2009.04.008},
  author = {Kirda, Engin and Jovanovic, Nenad and Kruegel, Christopher and Vigna, Giovanni},
  month = oct,
  year = {2009},
  pages = {592-604},
  file = {/Users/benjaminjoham/Downloads/kirda2009.pdf}
}

@inproceedings{mahmoud2017,
  title = {A Comparative Analysis of {{Cross Site Scripting}} ({{XSS}}) Detecting and Defensive Techniques},
  abstract = {Now the web applications are highly useful and powerful for usage in most fields such as finance, e-commerce, healthcare and more, so it must be well secured. The web applications may contain vulnerabilities, which are exploited by attackers to steal the user's credential. The Cross Site Scripting (XSS) attack is a critical vulnerability that affects on the web applications security. XSS attack is an injection of malicious script code into the web application by the attacker in the client-side within user's browser or in the server-side within the database, this malicious script is written in JavaScript code and injected within untrusted input data on the web application. This study discusses the XSS attack, its taxonomy, and its incidence. In addition, the paper presents the XSS mechanisms used to detect and prevent the XSS attacks.},
  booktitle = {2017 {{Eighth International Conference}} on {{Intelligent Computing}} and {{Information Systems}} ({{ICICIS}})},
  doi = {10.1109/IN\%0021CIS.2017.8260024},
  author = {Mahmoud, S. K. and Alfonse, M. and Roushdy, M. I. and Salem, A. M.},
  month = dec,
  year = {2017},
  keywords = {Browsers,Cross Site Scripting (XSS),cross site scripting attack,defensive techniques,DOM-base attack,injection code,Internet,JavaScript code,Malicious JavaScript,malicious script code,online front-ends,Reflected attack,security of data,Servers,Stored attack,Tools,web application security,Web application security,Web pages,web security,XSS attack,XSS mechanisms,XSS vulnerability},
  pages = {36-42},
  file = {/Users/benjaminjoham/Zotero/storage/YXLW8TJL/Mahmoud et al. - 2017 - A comparative analysis of Cross Site Scripting (XS.pdf;/Users/benjaminjoham/Zotero/storage/PUVT68YT/8260024.html}
}


